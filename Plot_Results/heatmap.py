import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import textwrap

# TFs+500:AUROC
# data = np.array([[0.9632, 0.9607, 0.9567, 0.9380, 0.9421, 0.8593, 0.8378, 0.6837, 0.5996],
#                  [0.9701, 0.9654, 0.9601, 0.9191, 0.9275, 0.8354, 0.7898, 0.6400, 0.5200],
#                  [0.9747, 0.9716, 0.9720, 0.9227, 0.9379, 0.8877, 0.7846, 0.6457, 0.5056],
#                  [0.9762, 0.9722, 0.9722, 0.9196, 0.9362, 0.8584, 0.8453, 0.5855, 0.5338],
#                  [0.9455, 0.9468, 0.9368, 0.9519, 0.9337, 0.8906, 0.6002, 0.6996, 0.5647],
#                  [0.9316, 0.9392, 0.9074, 0.9384, 0.9305, 0.9024, 0.7596, 0.7311, 0.7058],
#                  [0.8307, 0.8283, 0.7775, 0.8146, 0.8093, 0.6575, 0.6942, 0.6361, 0.6729],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9842, 0.9840, 0.9827, 0.9557, 0.9486, 0.9677, 0.6746, 0.5088, 0.5701],
#                  [0.9858, 0.9857, 0.9847, 0.9768, 0.9534, 0.9829, 0.6538, 0.4735, 0.5854],
#                  [0.9809, 0.9815, 0.9815, 0.8879, 0.8622, 0.9801, 0.6635, 0.5126, 0.3761],
#                  [0.9847, 0.9842, 0.9824, 0.9565, 0.9075, 0.9788, 0.6970, 0.5018, 0.6145],
#                  [0.9775, 0.9770, 0.9748, 0.9519, 0.8927, 0.9546, 0.6408, 0.4715, 0.5020],
#                  [0.9726, 0.9730, 0.9663, 0.9475, 0.9244, 0.9409, 0.7042, 0.5238, 0.4395],
#                  [0.9483, 0.9482, 0.9420, 0.9203, 0.8978, 0.9367, 0.7259, 0.5423, 0.5447],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9139, 0.9125, 0.9089, 0.7745, 0.7855, 0.7315, 0.6644, 0.5481, 0.5174],
#                  [0.9210, 0.9184, 0.9156, 0.8179, 0.8357, 0.8424, 0.7358, 0.5686, 0.5283],
#                  [0.9357, 0.9337, 0.9312, 0.8516, 0.8608, 0.8107, 0.7101, 0.6038, 0.5134],
#                  [0.9374, 0.9327, 0.9263, 0.8520, 0.8817, 0.6055, 0.7421, 0.5678, 0.5426],
#                  [0.9142, 0.9135, 0.8984, 0.7982, 0.8043, 0.8268, 0.7179, 0.6222, 0.5947],
#                  [0.9187, 0.9225, 0.9137, 0.7928, 0.7698, 0.8705, 0.6361, 0.6404, 0.6276],
#                  [0.9028, 0.8959, 0.8989, 0.7994, 0.6841, 0.8562, 0.6438, 0.6490, 0.5982],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9914, 0.9913, 0.9898, 0.9703, 0.9674, 0.9896, 0.7898, 0.5060, 0.6469]
#                  ])

# TFs+1000:AUROC
# data = np.array([[0.9620, 0.9594, 0.9475, 0.9221, 0.9185, 0.8765, 0.7953, 0.6867, 0.5974],
#                  [0.9647, 0.9603, 0.9589, 0.9038, 0.9166, 0.8340, 0.7918, 0.6442, 0.5130],
#                  [0.9729, 0.9714, 0.9706, 0.9162, 0.9371, 0.8875, 0.7361, 0.6195, 0.4868],
#                  [0.9777, 0.9741, 0.9744, 0.9267, 0.9458, 0.8789, 0.8071, 0.6035, 0.5485],
#                  [0.9498, 0.9482, 0.9221, 0.9294, 0.9335, 0.8891, 0.8307, 0.7232, 0.5938],
#                  [0.9319, 0.9325, 0.9223, 0.9252, 0.9135, 0.9044, 0.8169, 0.7637, 0.7000],
#                  [0.8378, 0.8329, 0.8456, 0.8920, 0.8192, 0.8641, 0.6990, 0.6576, 0.6406],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9854, 0.9857, 0.9845, 0.9756, 0.9651, 0.9782, 0.7135, 0.5060, 0.5963],
#                  [0.9864, 0.9862, 0.9849, 0.9789, 0.9622, 0.9853, 0.7276, 0.4802, 0.5915],
#                  [0.9820, 0.9807, 0.9839, 0.9244, 0.9226, 0.9759, 0.6668, 0.5217, 0.3961],
#                  [0.9871, 0.9868, 0.9846, 0.9619, 0.9057, 0.9781, 0.6829, 0.4947, 0.6378],
#                  [0.9807, 0.9809, 0.9790, 0.9619, 0.9039, 0.9665, 0.6530, 0.4674, 0.4771],
#                  [0.9808, 0.9809, 0.9769, 0.9619, 0.9314, 0.9651, 0.7234, 0.5231, 0.4661],
#                  [0.9512, 0.9500, 0.9422, 0.9317, 0.9121, 0.9338, 0.7364, 0.5315, 0.5804],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9293, 0.9269, 0.9254, 0.7908, 0.7843, 0.8547, 0.7012, 0.5470, 0.5223],
#                  [0.9362, 0.9356, 0.9282, 0.8359, 0.8621, 0.8312, 0.7225, 0.5555, 0.5558],
#                  [0.9412, 0.9396, 0.9350, 0.8645, 0.8881, 0.8193, 0.7061, 0.6037, 0.5216],
#                  [0.9458, 0.9427, 0.9381, 0.8659, 0.8918, 0.6906, 0.7200, 0.5721, 0.5517],
#                  [0.9266, 0.9291, 0.9078, 0.8332, 0.8371, 0.8225, 0.6112, 0.6163, 0.6308],
#                  [0.9268, 0.9197, 0.9168, 0.8330, 0.8006, 0.8685, 0.7240, 0.6578, 0.6706],
#                  [0.8041, 0.8050, 0.8032, 0.6831, 0.5895, 0.8225, 0.5421, 0.5903, 0.5811],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9896, 0.9897, 0.9879, 0.9714, 0.9632, 0.9897, 0.7898, 0.5060, 0.6469]
#                  ])


# TFs+500:AUPRC
# data = np.array([[0.7132, 0.7065, 0.6973, 0.6624, 0.6653, 0.2100, 0.1978, 0.0659, 0.0362],
#                  [0.7760, 0.7602, 0.7438, 0.6028, 0.5682, 0.1583, 0.1588, 0.0483, 0.0362],
#                  [0.8377, 0.8272, 0.8235, 0.6935, 0.6627, 0.3127, 0.1960, 0.0545, 0.0391],
#                  [0.7679, 0.7145, 0.7451, 0.5111, 0.5457, 0.1158, 0.1772, 0.0379, 0.0291],
#                  [0.6609, 0.6707, 0.6328, 0.7297, 0.6776, 0.3328, 0.0429, 0.0801, 0.0463],
#                  [0.6984, 0.7100, 0.6360, 0.7803, 0.7376, 0.4548, 0.2051, 0.2445, 0.1726],
#                  [0.3318, 0.3501, 0.3184, 0.5464, 0.5395, 0.0988, 0.1252, 0.2071, 0.2174],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.8853, 0.8868, 0.8792, 0.8038, 0.7848, 0.8238, 0.3218, 0.2019, 0.2063],
#                  [0.9643, 0.9627, 0.9635, 0.9486, 0.9210, 0.9575, 0.5165, 0.4027, 0.4470],
#                  [0.7412, 0.7695, 0.7507, 0.6163, 0.6105, 0.7520, 0.1473, 0.0803, 0.0644],
#                  [0.9609, 0.9602, 0.9561, 0.8880, 0.8282, 0.9355, 0.5427, 0.3910, 0.4618],
#                  [0.9789, 0.9780, 0.9747, 0.9474, 0.8951, 0.9406, 0.6922, 0.5766, 0.5696],
#                  [0.9678, 0.9686, 0.9607, 0.9381, 0.9047, 0.9106, 0.7190, 0.5375, 0.4901],
#                  [0.9364, 0.9378, 0.9207, 0.9015, 0.8808, 0.9141, 0.7366, 0.5620, 0.5636],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.2629, 0.2533, 0.2368, 0.1801, 0.1971, 0.0547, 0.0390, 0.0202, 0.0172],
#                  [0.2642, 0.2728, 0.2402, 0.2065, 0.2249, 0.0916, 0.0699, 0.0222, 0.0179],
#                  [0.4489, 0.4446, 0.4303, 0.3731, 0.3616, 0.1364, 0.0795, 0.0254, 0.0203],
#                  [0.3587, 0.3352, 0.3048, 0.2545, 0.2778, 0.0183, 0.0631, 0.0236, 0.0184],
#                  [0.4613, 0.4551, 0.4090, 0.3944, 0.3615, 0.1903, 0.1188, 0.0421, 0.0332],
#                  [0.4744, 0.4838, 0.4836, 0.4264, 0.4026, 0.2197, 0.1054, 0.0950, 0.0701],
#                  [0.4617, 0.4347, 0.3322, 0.4152, 0.3159, 0.3123, 0.1066, 0.1537, 0.1309],
#                  [0, 0, 0, 0, 0, 0, 0, 0, 0],
#                  [0.9385, 0.9417, 0.9303, 0.8789, 0.8673, 0.9176, 0.4702, 0.2431, 0.3148]
#                  ])


# TFs+1000:AUPRC
data = np.array([[0.7025, 0.6884, 0.6729, 0.6159, 0.6254, 0.1781, 0.1613, 0.0591, 0.0316],
                 [0.7686, 0.7418, 0.7326, 0.6159, 0.5459, 0.1040, 0.1713, 0.0413, 0.0286],
                 [0.8077, 0.7994, 0.8000, 0.6578, 0.6537, 0.1726, 0.1621, 0.0461, 0.0331],
                 [0.7734, 0.7338, 0.7440, 0.5296, 0.5775, 0.1128, 0.1496, 0.0350, 0.0272],
                 [0.6647, 0.6684, 0.6269, 0.6709, 0.6212, 0.3461, 0.2956, 0.0895, 0.0483],
                 [0.7108, 0.7254, 0.6996, 0.7550, 0.6645, 0.5097, 0.3151, 0.2064, 0.1791],
                 [0.3555, 0.3864, 0.3658, 0.6187, 0.5787, 0.3013, 0.1027, 0.1842, 0.2272],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0.9060, 0.9027, 0.8947, 0.8560, 0.8438, 0.8634, 0.3633, 0.1964, 0.2234],
                 [0.9677, 0.9670, 0.9608, 0.9474, 0.9239, 0.9637, 0.6058, 0.4062, 0.4526],
                 [0.7780, 0.7757, 0.7783, 0.7127, 0.6920, 0.7880, 0.1668, 0.0814, 0.0631],
                 [0.9693, 0.9678, 0.9623, 0.9033, 0.8397, 0.9314, 0.5418, 0.3967, 0.4824],
                 [0.9808, 0.9811, 0.9776, 0.9540, 0.8999, 0.9648, 0.6976, 0.5567, 0.5399],
                 [0.9797, 0.9809, 0.9750, 0.9555, 0.9251, 0.9563, 0.7703, 0.5598, 0.5262],
                 [0.9356, 0.9365, 0.9209, 0.9130, 0.8886, 0.9075, 0.7211, 0.5335, 0.5662],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0.2500, 0.2432, 0.1980, 0.1576, 0.1775, 0.0768, 0.0411, 0.0177, 0.0163],
                 [0.2684, 0.2612, 0.2289, 0.1734, 0.1937, 0.0781, 0.0520, 0.0199, 0.0190],
                 [0.4228, 0.4221, 0.3900, 0.3659, 0.3425, 0.0843, 0.0669, 0.0227, 0.0178],
                 [0.3410, 0.3066, 0.3009, 0.2296, 0.2720, 0.0214, 0.0452, 0.0215, 0.0174],
                 [0.4504, 0.4572, 0.4047, 0.3837, 0.3526, 0.1173, 0.0355, 0.0523, 0.0357],
                 [0.4985, 0.5067, 0.4580, 0.4671, 0.4319, 0.3221, 0.1887, 0.0897, 0.0772],
                 [0.2371, 0.2373, 0.1847, 0.2649, 0.1997, 0.2190, 0.0478, 0.0898, 0.0871],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0.9143, 0.9147, 0.9081, 0.8729, 0.8477, 0.9307, 0.4864, 0.2259, 0.2808]
                 ])

categories = ['STRING', 'STRING', 'STRING', 'STRING', 'STRING', 'STRING', 'STRING', '',
              'Cell-type-specific ChIP-seq', 'Cell-type-specific ChIP-seq', 'Cell-type-specific ChIP-seq',
              'Cell-type-specific ChIP-seq', 'Cell-type-specific ChIP-seq', 'Cell-type-specific ChIP-seq',
              'Cell-type-specific ChIP-seq', '',
              'Non-specific ChIP-seq', 'Non-specific ChIP-seq', 'Non-specific ChIP-seq',
              'Non-specific ChIP-seq', 'Non-specific ChIP-seq', 'Non-specific ChIP-seq',
              'Non-specific ChIP-seq', '',
              'LOF/GOF'
              ]
# 定义分层标签
cell_types = ['hESC', 'hHEP', 'mDC', 'mESC', 'mHSC-E', 'mHSC-GM', 'mHSC-L', '',
              'hESC', 'hHEP', 'mDC', 'mESC', 'mHSC-E', 'mHSC-GM', 'mHSC-L', '',
              'hESC', 'hHEP', 'mDC', 'mESC', 'mHSC-E', 'mHSC-GM', 'mHSC-L', '',
              'mESC'
              ]

# 创建 DataFrame
df = pd.DataFrame(data, index=cell_types,
                  columns=['GRN-GT\n(exp+DeepGene)', 'GRN-GT(exp)', 'GRN-GT\n(DeepGene)', 'GRNNLink', 'GNNLink', 'GENELink', 'GNE',
                           'PCC', 'MI'])

mask = np.zeros(df.shape, dtype=bool)  # 先创建 False 矩阵
mask[df.index == ""] = True  # 对空白行赋值为 True

# 设置画布
fig, ax = plt.subplots(figsize=(9, 10))

# 画热图
sns.heatmap(df, annot=True, cmap="magma", center=0.6, linewidths=0, fmt=".4f", mask=mask, ax=ax)

# 让横坐标倾斜 45 度
plt.xticks(rotation=45, ha="center", fontsize=8)
ax.tick_params(axis='x', length=0)  # 隐藏 x 轴的刻度线，但标签仍然显示

ax.set_yticks([])  # 隐藏 y 轴刻度线和标签

prev_category = None
category_positions = {}
for i, (category, cell_type) in enumerate(zip(categories, cell_types)):
    if category != prev_category:
        category_positions[category] = i
        prev_category = category
    if cell_type:
        ax.text(-0.2, i + 0.5, cell_type, ha='right', va='center', fontsize=10)  # 细胞类型名称

# 绘制第一级类别标签
for category, pos in category_positions.items():
    wrapped_text = "\n".join(textwrap.wrap(category, width=12))  # 自动换行
    group_height = sum(1 for c in categories if c == category)  # 计算该类别的总行数
    ax.text(-3.6, pos + group_height / 2, wrapped_text, ha='left', va='center', fontsize=12, fontweight='bold')

# 设置标题
plt.title("TFs+1000")

# 调整边距，防止裁剪
plt.subplots_adjust(left=0.26, right=0.95, top=0.95, bottom=0.10)

# 显示图像
# plt.show()
plt.savefig('4_7.pdf', format='pdf')
